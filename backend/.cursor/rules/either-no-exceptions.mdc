# Either No Exceptions Rule

## 규칙 이름
`either-no-exceptions`

## 설명
메서드의 리턴 타입이 `Either<Failure, T>`인 경우, 해당 메서드는 **어떤 예외(Exception)도 던지지 않아야** 합니다. `IllegalArgumentException`, `NullPointerException` 등을 포함한 모든 오류 상황은 `Either.left(Failure)`로 처리해야 합니다.

## 세부 규칙

### 1. 예외 금지
- `Either<Failure, T>` 리턴 타입을 가진 메서드는 `throws` 선언을 하지 않습니다
- `throw new Exception()` 구문을 사용하지 않습니다
- `IllegalArgumentException`, `NullPointerException` 등 프로그래밍 오류도 예외로 던지지 않습니다

### 2. 오류 처리 방식
Service 클래스에서 `Either.left()`로 실패를 리턴하는 경우, `ValidationMessageResolver`를 사용하여 다국어 처리된 메시지를 제공해야 합니다. 하드코딩된 한국어 메시지 대신 메시지 키를 사용하고, `messages` 파일에서 해당 메시지를 정의해야 합니다.

**Failure 타입별 사용법:**
- `Failure.InputError`           // 400 - 입력 형식 오류
- `Failure.PermissionDenied`     // 403 - 권한 거부
- `Failure.NotFound`            // 404 - 리소스 미발견
- `Failure.ResourceConflict`    // 409 - 리소스 충돌
- `Failure.PreconditionFailed`  // 412 - 전제 조건 실패
- `Failure.BusinessRuleViolation` // 422 - 비즈니스 룰 위반
- `Failure.InternalError`       // 500 - 내부 서버 오류

### 3. 외부 호출 처리
- Repository, 외부 API 등에서 예외가 발생할 수 있는 경우 `Try.of()` 또는 `try-catch`로 감싸서 처리
- 발생한 예외를 적절한 `Failure` 타입으로 변환하여 `Either.left`로 반환

## 적용 예시

### ❌ 잘못된 예
```java
public Either<Failure, List<Board>> getUserBoards(GetUserBoardsCommand command) {
    if (command == null) {
        throw new IllegalArgumentException("Command cannot be null"); // 예외 던짐
    }
    
    if (command.ownerId() == null) {
        throw new NullPointerException("Owner ID is required"); // 예외 던짐
    }
    
    return boardRepository.findByOwnerId(command.ownerId()); // 예외 처리 없음
}
```

### ✅ 올바른 예
```java
@Service
@RequiredArgsConstructor
public class GetUserBoardsService {
    private final BoardRepository boardRepository;
    private final ValidationMessageResolver messageResolver;
    
    public Either<Failure, List<Board>> getUserBoards(GetUserBoardsCommand command) {
        // null 체크도 Either.left로 처리
        if (command == null) {
            var violation = Failure.FieldViolation.builder()
                    .field("command")
                    .message(messageResolver.getCommonValidationMessage("required", "command"))
                    .rejectedValue(null)
                    .build();
            return Either.left(Failure.ofInputError(
                messageResolver.getMessage("validation.input.invalid"),
                "INVALID_COMMAND",
                List.of(violation)
            ));
        }
        
        // 비즈니스 검증 실패도 Either.left로 처리
        if (command.ownerId() == null) {
            var violation = Failure.FieldViolation.builder()
                    .field("ownerId")
                    .message(messageResolver.getCommonValidationMessage("required", "ownerId"))
                    .rejectedValue(null)
                    .build();
            return Either.left(Failure.ofInputError(
                messageResolver.getMessage("validation.input.invalid"),
                "MISSING_OWNER_ID",
                List.of(violation)
            ));
        }
        
        // 외부 호출 예외를 Either.left로 변환
        return Try.of(() -> boardRepository.findByOwnerId(command.ownerId()))
            .fold(
                throwable -> Either.left(Failure.ofInternalError(
                    messageResolver.getMessage("error.general.internal"),
                    "BOARD_FETCH_ERROR",
                    Map.of("ownerId", command.ownerId())
                )),
                Either::right
            );
    }
}
```

### 메시지 파일 예시 (messages_ko.properties)
```properties
# 공통 검증 메시지
validation.input.invalid=입력 데이터가 올바르지 않습니다
validation.common.required={0}는 필수입니다

# 에러 메시지
error.general.internal=내부 오류가 발생했습니다. 잠시 후 다시 시도해주세요.

# 도메인별 검증 메시지
validation.board.not.found=보드를 찾을 수 없습니다
validation.board.modification.access.denied=보드 수정 권한이 없습니다
```

## 적용 범위
- Service 클래스의 모든 public 메서드
- UseCase 인터페이스의 모든 메서드
- Repository 구현체에서 `Either<Failure, T>`를 리턴하는 메서드

## 이점
1. **일관성**: 모든 오류가 동일한 방식으로 처리됨
2. **예측 가능성**: 호출자가 예외 처리를 걱정할 필요 없음
3. **함수형 프로그래밍**: Railway-oriented programming 패턴 적용
4. **테스트 용이성**: 모든 오류 상황을 쉽게 테스트 가능
5. **다국어 지원**: ValidationMessageResolver를 통한 국제화된 오류 메시지
6. **유지보수성**: 메시지 키를 통한 중앙화된 오류 메시지 관리 
1. **일관성**: 모든 오류가 동일한 방식으로 처리됨
2. **예측 가능성**: 호출자가 예외 처리를 걱정할 필요 없음
3. **함수형 프로그래밍**: Railway-oriented programming 패턴 적용
4. **테스트 용이성**: 모든 오류 상황을 쉽게 테스트 가능 